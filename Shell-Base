#!/usr/bin/env bash
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : Jefferson Rocha <lrcjefferson@gmail.com>
# HOMEPAGE          : https://slackjeff.github.io 
# DATA DE CRIAÇÃO   : 2018-03-26
# PROGRAMA          : Shell-Base
# VERSÃO            : 1.0.2
SHELL_BASE_VERSION='1.0.2'
# LICENÇA           : GPL3
# PEQUENA DESCRIÇÃO : Programa para criação de template, deixe tudo organizado 
#                     como deve ser!
#                     Seus programas serão mais profissionais com o Shell-Base.
# CHANGELOG :
# 2021-11-02 - Vovolinux
# - Criada variável SHELL_BASE_VERSION para exibir a versão na ajuda;
# - Exibindo ajuda ao chamar o Shell-Base sem argumentos.
#
# 2020-04-26 - Vovolinux
# - Criado o vetor contendo o questionário que será exibido para o usuário.
# - Alterada a função criar() para exibir o questionário.
# - Vetor 'informacoes' movido para a sessão --- VARIÁVEIS --- do script.
# - Revisão de ortografia e gramática.
# - Criada a função 'set_dir_template' para corrigir path do template.
# - Incluida a variável 'dir_template' para o diretório de criação do template.
# - Incluída a anoteção de copyright 'licenca - © yyyy - autor'
#
# 2019-12-13 - Vovolinux
# - Incluída a verificação de r00t como default para os templates criados.
# - Incluída a variavel 'extensao' para permitir a criação de scripts sem uma
#   extensão ou com uma extensão diferente da variável 'interpretador'.
# - Alteração para permissão de execução do script criado para 755.
#------------------------------------------------------------------------------|


#--------------------------------- VARIÁVEIS ---------------------------------->

# Diretório para criação do template
dir_template="$PWD"

# Nome do template que será criado (Ex.: nome_do_programa.extensao)
template="template"

# Data atual
data=$(date "+%d/%m/%Y às %H:%M")

# Vetor contendo o questionário que será passado para o usuário.
# Caso queira modificar, não esqueça de adicionar tambem no vetor 'questionario'.
informacoes=("autor" "e_mail" "homepage" "dir_template" "nome_do_programa" "extensao" "interpretador" "versao" "licenca" "pequena_descricao")

# Vetor contendo o questionário que será exibido para o usuário.
# Caso queira modificar, não esqueça de adicionar tambem no vetor 'informacoes'.
questionario=("Autor" "E-mail" "Homepage" "Diretório do template" "Nome do programa" "Extensao" "Interpretador" "Versão" "Licença" "Pequena descrição")

# Colorindo a sua vida.
fecha="\033[m"
verde="\033[32;1m"
vermelho="\033[31;1m"
branco="\033[37;1m"
#------------------------------- FIM-VARIÁVEIS --------------------------------<


#----------------------------------- FUNÇÕES ---------------------------------->

dicas()
{
    clear
    cat | less << EOF
INFORMAÇÃO

    Você sabe do poder do Shell? Espero que sim! Vou te passar algumas dicas valiosas
    para deixar seu programa com um grande diferencial, afinal queremos criar programas
    e não scripts não é? Scripts são descartáveis... Programas não.


VÁRIAVEIS DENTRO DE FUNÇÕES

    Quando você criar uma váriavel dentro de uma função utilize sempre 'local' na frente,
    você não quer sujar o sistema do usuário não é?
    Utilizando o 'local' na frente da váriavel, como o próprio nome sugere, vocẽ cria uma
    váriavel local, o que é mais correto a se fazer! 
    
    Exemplos:
    variavel=\$(printf %s "oi tudo bem?\n")        ERRADO
    local variavel=\$(printf %s "oi tudo bem?\n")  CORRETO


ECHO OU PRINTF?

    Prefira utilizar 'printf' ao invés do 'echo'!
    Vários testes foram feitos e todos eles apontaram que o 'printf' é mais leve que o 'echo'.
    O 'echo' tem vários parâmetros que não são portáveis para outros dialetos do Shell.
    Então prefira e se acostume com o 'printf'! ele é mais simples, poderoso, e portável 
    para todos os dialetos do Shell.
    
    Exemplos:
    echo -e "\033[31;1m OLÁ MUNDO! \033[m"   ERRADO
    printf %b "\033[31;1m OLÁ MUNDO! \033[m" CORRETO
    

NÃO USE PRINTF OU ECHO DESNECESSÁRIOS!

    É costume de muitos programadores usar 'echo' e 'printf' desnecessários!
    Por exemplo: para criar um simples menu, 10 'echo' antes e 10 'echo' depois para
    deixar o script bem alinhado!
    Isso é correto? Sim... Se funciona não tem como dizer que é errado, porem é sempre
    bom criar programas mais profissionais, principalmente quando você disponibiliza
    na internet!
    Sempre use a boa prática e não faça nada na base do facão. Nada de Go-Horse!
    Sabemos que Shell e perfomance já andam juntos! então prefira não deixar seu 
    programa mais lento.

    MANEIRA LENTA:
    
    echo
    echo
    echo "-----------------------------------------------------------"
    echo "OI TUDO BEM?"
    echo "Este é meu programa que faz alguma coisa!"
    echo "Este monte de echo, não sei por que estou usando."
    echo "Achei bonito e resolvi fazer um cabeçalho para meu programa"
    echo "Desta forma!"
    echo "-----------------------------------------------------------"
    echo
    echo
    
    OPÇÕES MAIS RÁPIDAS:

    printf %b \\
      "\n\n\nOI TUDO BEM?
      Este é meu programa que faz alguma coisa!
      Agora com certeza estou deixando meu programa um pouco mais leve
      Não estou usando echo ou printf desnecessários!\n\n\n"



    cat << FECHA
    
    
    
      OI TUDO BEM?
      Este é meu programa que faz alguma coisa!
      Agora com certeza estou deixando meu programa um pouco mais leve
      Não estou usando echo ou printf desnecessários!
      
      
      
    FECHA


ESTÁ EM DÚVIDA? USE ASPAS.

    Em Shell tudo é string. Prefira sempre usar aspas em tudo.
    Além das aspas protegerem sua string caso ela esteja nula, ficará mais agrádavel
    e mais profissional desta forma!
    Mas tome cuidado, alguns retornos de algumas váriaveis de ambiente podem
    ser alterados! Um bom exemplo a váriavel de ambiente $*.
    Sem as aspas, ela cria uma string em uma única linha; Caso você use as
    aspas ela muda o seu retorno!
    
    
    var="Aqui tem string e número 1991"
    var="Jefferson"
    var="1991"
    var="Uma string"
    case "\$UID" in 1000) printf %b "OI?\n"; esac
    for list in "arq1" "arq2" "arq3" "slackjeff the power"; do printf "\$list\n"; done
    "\$?"
    

COMENTÁRIOS SÃO IMPORTANTES!
    
    Ao contrário que muita gente fala, comentários são extremamentes importantes!
    Não faça declarações de amor, ou falando mal do seu programa ou do mundo em geral!
    Sim, eu sei que às vezes ficamos com raiva por que um certo trecho de código não está
    funcionando, faz parte... lide com isso!
    Comentários são de extrema importância, pois assim estamos cooperando com outros
    programadores mais leigos!
    Eles conseguirão ler com mais facilidade um bloco de código, quando ele estiver comentado!
    Faça sempre comentários nas linhas de códigos mais "complicadas".
    
    Isto por exemplo não é tão certo:
    
    # Bloca que verifica se o usuário é root
    # se for root ele imprimi uma mensagem para
    # o usuário.
    # Se não for root o programa continua!
    if test "\$UID" -eq "0"; then
        printf "Rooot? não."
    fi    
   

    Você não está falando para crianças do prezinho! Você está falando com outros programadores.
    Quem for ler o seu código sabe o que quer! Mesmo que sejam programadores que estão iniciando
    o aprendizado, eles não são incompetentes a ponto de não saber o que um faz um bloco simples como este!
    Caso prefira comentar, faça algo simples e direto:
    
    # É root?
    if test "\$UID" -eq "0"; then
        printf "Rooot? não."
    fi  

    # Dialog está instalado? 
    if ! type -P dialog; then
       printf %b "Parece que o dialog não está no seu sistema."
    fi   
   
    Percebeu que comentado fica mais fácil compreender? E eu precisei especificar o que todo o bloco faz? Não.
    Um simples comentário indo direto ao ponto já fica bem melhor a compreensão!
    Por exemplo, muitas pessoas não sabem que com o comando type podemos verificar se o programa X está instalado
    no sistema...
    Ahh, já que entramos no assunto, o comando type é portavel para outros dialetos do Shell! 
    ao contrário do comando which.
   
    Caso você queira fazer uma maior explicação do que aquele bloco de código faz, use o bloco de comentários, 
    por exemplo:
   
    # BUG
    # Nesta parte do código não estou conseguindo
    # resolver a questão do status de sáida!
    # Ele retorna status 0, quando era para estar
    # retornando status 1.
    
    Se for um pequeno comentário, prefira usar comentários de meia linha.
    
    > "arquivo.\$log" # Criando log temporário.
    
    Ou comentários do tipo cabeçalho.
    
    # Criando log temporário.
    > "arquivo.\$log"
   
   
'&&' E '||' NÃO SUBSTITUEM 'IF' E 'ELSE'

    Operadores lógicos 'AND' e 'OR' não são blocos condicionais 'if' e 'else'!
    O && só executa o próximo comando se o primeiro comando retornar
    status de sáida 0, 
    E o || é executado caso o primeiro comando retornar um status diferente de 0.
    Utilize sempre operadores lógicos quando precisar verifcar um status por exemplo, que pode ser criado
    em uma única linha, mas não abuse... prefira sempre blocos condicionais completos!
    
    Ok, seu código irá ficar com mais linhas, mas use a boa prática sempre!
    Dê uma conferida em programas feitos por programadores avançados em Shell...
    Dificilmente você verá blocos de Operadores lógicos substituindo if/else.
    



    Condicional com 'and' e 'not'
    
    [[ "\$name" = "Slackjeff" ]] && shutdown -r now || printf "Usuário $name, não encontrado no sistema.\n."
     
    ou
    
    [[ "\$name" = "Slackjeff" ]] && \	\
      shutdown -r now
      || \\
      printf "Usuário $name, não encontrado no sistema.\nVocê não tem permissão\n." 
     
    
    
    
    Bloco condicional completo, if/else   
    
    if [[ "\$name" = "Slackjeff" ]]; then
       shutdown -r now
    else
       printf "Usuário $name, não encontrado no sistema.\nVocê não tem permissão\n."
    fi
   

USE AWK COM MODERAÇÃO!

    'awk' sem dúvidas é uma linguagem de manipulação de texto muito potente!
    Integrada com 'sed', que é outra linguagem muito potente, você faz tudo! Q que uma não fizer,
    a outra com certeza fará.
    Mas use com cuidado a linguagem 'awk', pois ela é pesada e com certeza deixará seus programas mais pesados. 
    Para substituir o 'awk' você pode utilizar as ferramentas básicas que estão presente em qualquer distribuição
    GNU/Linux.
  
    Exemplos:
    sed
    grep
    cut


OH MY READ

    Programas com interação com o usuário são muito importantes e legais!
    Para isto usamos o comando read, ele faz a leitura do stdin (teclado).
    Mas a partir de agora, você vai começar a reparar como os programadores o fazem!
    Vamos a alguns exemplos:
    
    printf %s "Qual é o diretorio que você deseja salvar o arquivo?"
    read dir_save
    
    O código acima pode simplesmente ser substituido assim, economizando uma linha e um printf:
    
    read -p  "Qual é o diretorio que você deseja salvar o arquivo?" dir_save
    
    Legal! Mas eu quero colorir o o texto do read, como faço? simples utilize $'', basicamente você está
    protegendo sua string mas interpreta \n, \t, \a etc... diferente das aspas simples '' sozinha.
    
    read -p  $'\033[34;1mQual é o diretorio que você deseja salvar o arquivo?\033[m\n' dir_save
    
    
    Um problema que vejo é ter 50 read fazendo um formulario, por exemplo: supondo que eu quero fazer várias
    perguntas para meu usuário, como eu faço?
    
    read -p  "Qual a sua idade?" idade
    read -p  "Cor favorita?" cor
    read -p  "Nome da sua mae" nome_mae
    read -p  "Escolaridadae?" escolaridade
    read -p  "Nome da namorada" nome_namorada
     
    
    Está correto usar vários read? Sim! Não está errado, e haverá situações em que você precisará usar o
    read neste formato.
    Mas como é um simples formulário, podemos criar um loop for por exemplo, assim vamos economizar dedo.
    
    for form in "idade" "cor_favorita" "nome_mae" "escolaridade" "nome_namorada"; do
        read -p "\${form[@]}: "\${form[@]}
    done    
    
      
STATUS DE SÁIDA!    
    
    Em muitos casos, a váriavel de ambiente \$? salva nosso dia! Principalmente quando precisamos verificar 
    muitos status de saída, como é o caso da interface dialog.
    Vamos ao exemplo: Se o usuário apertar [yes], o status retorna 0; se apertar [no] retorna 1.
    
    # Aperto [no], o script sai.
    dialog --yesno "Você deseja continuar?" 0 0
    if [[ "\$?" -ne "0" ]]; then
        exit 1
    fi
    
    Mas pode dar erro! se por acidente em uma madrugada eu acabo inserindo um echo entre o dialog e a condicional if?
    Não preciso dizer que o status vai mudar não é? Será sempre 0, já que é quase impossivel do echo dar erro.
    Você precisa entender que a váriavel de ambiente \$? é a "Maria-vai-com-as-outras", então tente evitar de usar ela.
    Mas haverá casos em que você precisará usar.
    Em seu lugar, utilize bloco/blocos if! será melhor, e você evitá problemas futuros!
    Vamos ao mesmo exemplo acima com dialog... 
    
    # Aperto [no], o script sai.
    if ! dialog --yesno "Você deseja continuar?" 0 0; then
        exit 1
    fi
    
    Mais um exemplo. Vamos verificar se o grep achou o usuário root em /etc/passwd
    
    if grep -e "^[Rr]oot" /etc/passwd; then
        printf "Encontrei o usuário root no sistema!"
    else
        printf "O usuário root não foi encontrado! favor criar."
    fi    


TESTE COM CONSCIÊNCIA!
  
    No interpretador bash não é correto fazer testes neste formato [ teste ], sim! se você não está usando
    o bourne Shell "sh" como interpretador prefira utilizar o padrão bash [[ teste ]].
    
    if [[ -z "\$HOME" ]]; then
        printf "Não está vazia."
    else
        printf "Está vazia."
    fi
    
    ou teste de uma linha
    
    [[ -z "\$HOME" ]] && printf "Está vazia." || printf "Não está vazia."    
  

Texto criado por Jefferson Rocha <lrcjefferson@gmail.com>
Texto revisado por Vovolinux <suporte@vovolinux.com.br>
EOF
}

ajuda()
{
    clear
    cat << EOF
---------------------
 Shell-Base - v$SHELL_BASE_VERSION
---------------------
OPÇÕES DISPONIVEIS: 

     -c ou --criar
        Para criar um template utilize este parâmetro.
        Você pode deixar todas informações nulas se caso desejar.
         
    -a ou --ajuda
        Mostra esta opção de ajuda.
    
    -d ou --dicas
        Texto contendo algumas dicas de programação Shell.
 
EOF
}


# Corrige o path do template
set_dir_template()
{
    # Se não informar o diretório
    [[ "${dir_template}" = "" ]] && dir_template="$PWD"

    # Substitui o ~ (til) pelo endereço absoluto da home do usuário
    [[ "${dir_template:0:2}" = "~/" ]] && dir_template="${HOME}${dir_template: 1}" 

    # Retira a barra do final
    [[ "${dir_template: -1}" = "/" ]] && dir_template="${dir_template::-1}" 

    # Cria o dir_template informado caso não exista
    if ! [[ -d "${dir_template}" ]]; then
        printf %b "\n"
        mkdir -v "${dir_template}"
    fi

    # Verifica se a extensão foi informada, para incluir no nome do arquivo criado.
    if [[ "${extensao}" != "" ]]; then
        template="${template}.${extensao}"
    fi    
}

# A base de todo o programa se encontra aqui
base(){
    set_dir_template
    
    if [[ "${interpretador}" -eq "" ]]; then
        interpretador='bash'
    fi

    ano=$(date "+%Y")

cat << EOF > "${dir_template}/${template}"
#!/usr/bin/env $interpretador
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : $autor <$e_mail>
# HOMEPAGE          : $homepage 
# DATA DE CRIAÇÃO   : $data 
# PROGRAMA          : $nome_do_programa
# VERSÃO            : $versao
# LICENÇA           : $licenca - © $(date "+%Y") - $autor
# PEQUENA DESCRIÇÃO : $pequena_descricao
#
# CHANGELOG :
#
#------------------------------------------------------------------------------|

#--------------------------------- VARIÁVEIS ---------------------------------->
#
# Aqui vão todas as váriaveis do programa.

### VARIÁVEIS DO SCRIPT ###

# Autor
autor='$autor'

# Programa
programa='$nome_do_programa'

# Versão
versao='$versao'

# Ano atual
ano='${ano}'

# Informação de Copyright
copyright="© ${ano} - ${autor}"

#------------------------------- FIM-VARIÁVEIS --------------------------------<



#----------------------------------- FUNÇÕES ---------------------------------->
#
# Funções vão aqui!

# Verifica se o script está sendo executado como r00t.
is_root()
{
    # é root?
    [[ "\$UID" -ne "0" ]] && {  
        printf '%b' "Execute como r00t.\n"
        exit 1
    }
}

#--------------------------------- FIM-FUNÇÕES --------------------------------<



#---------------------------------- TESTES ------------------------------------>
#
# Testes iniciais do seu programa vão neste bloco.

is_root

#--------------------------------- FIM-TESTES ---------------------------------<

# Programa começa aqui :)

EOF
}

# Permissão para execução do script criado
permissao()
{
    printf %b "\n"
    printf %b "Diretorio: ${dir_template}\nArquivo: ${template}\n\n"
    chmod 755 "${dir_template}/${template}" -v
    printf %b "\n"  
}

criar()
{
    
    local texto="${vermelho}Preencha todos os dados corretamente!
Assim você não perde seu tempo depois.
O arquivo terá o nome ${branco}nome_do_programa.extensao${fecha}${vermelho}
e será gerado na pasta atual ou no caminho informado no nome do programa.\n\n${fecha}"

    printf %b "$texto"
    i=0
    for info in "${informacoes[@]}"; do
        read -ep "${questionario[$i]}: " ${info[@]}
        let i++
    done

    [[ "${nome_do_programa}" = '' ]] || template="${nome_do_programa}"

    # Chamando e testando a função para criar template de acordo com os dados passados.
    if base; then
        permissao
        printf %b "${verde}Concluído com sucesso.\nArquivo gerado: ${dir_template}/${template}${fecha}\n"
          exit 0
    else
        printf %b "${vermelho}Não consegui criar o arquivo, tente novamente...\n${fecha}"    
        exit 1
    fi
}

#--------------------------------- FIM-FUNÇÕES --------------------------------<


# Programa começa aqui :)

# Verificando qual parâmetro foi passado.
case $1 in
    -c|--criar) criar ;; # Chamada Função.
    -a|--ajuda) ajuda ;; # Chamada Função.
    -d|--dicas) dicas ;; # Chamada Função.
    *) ajuda
esac
